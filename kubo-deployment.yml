<%
  iaases = %w(gcp vsphere aws-lb openstack)
  stemcell_types = {
    'gcp' => 'google-kvm',
    'gcp-lb' => 'google-kvm',
    'vsphere' => 'vsphere-esxi',
    'vsphere-lb' => 'vsphere-esxi',
    'aws' => 'aws-xen-hvm',
    'aws-lb' => 'aws-xen-hvm',
    'openstack' => 'openstack-kvm'
  }
  additional_envs = %w(gcp-lb vsphere-lb)
  env_list = iaases + additional_envs
  enable_failure_alert = true

  upgrade_test_iaases = %w(gcp-lb vsphere-lb)
  multi_master_upgrade_test_iaases = %w(aws-lb gcp-lb)
  iaases_for_new_bosh_stemcell = upgrade_test_iaases | multi_master_upgrade_test_iaases
  conformance_test_iaases = iaases
  proxy_iaases = %w(vsphere)
%>
---
groups:
- name: all
  jobs:
  - run-unit-tests
  - build-kubo-release
  - package-kubo-deployment-tarball
<% iaases.each do |iaas| %>
  - run-k8s-conformance-tests-<%= iaas %>
<% end %>
<% env_list.each do |env| %>
  - claim-lock-<%= env %>
  - install-bosh-<%= env %>
  - deploy-k8s-<%= env %>
  - run-k8s-integration-tests-<%= env %>
  - run-k8s-turbulence-tests-<%= env %>
  - destroy-k8s-<%= env %>
  - destroy-bosh-<%= env %>
<% end %>
<% upgrade_test_iaases.each do |iaas| %>
  - claim-lock-upgrade-<%= iaas %>
  - install-old-bosh-<%= iaas %>
  - deploy-old-k8s-<%= iaas %>
  - upgrade-bosh-and-kubo-<%= iaas %>
  - destroy-k8s-upgrade-<%= iaas %>
  - destroy-bosh-upgrade-<%= iaas %>
<% end %>
<% multi_master_upgrade_test_iaases.each do |iaas| %>
  - claim-lock-upgrade-multi-master-<%= iaas %>
  - install-old-bosh-multi-master-<%= iaas %>
  - deploy-old-k8s-multi-master-<%= iaas %>
  - upgrade-bosh-and-kubo-multi-master-<%= iaas %>
  - destroy-k8s-upgrade-multi-master-<%= iaas %>
  - destroy-bosh-upgrade-multi-master-<%= iaas %>
<% end %>
<% proxy_iaases.each do |env| %>
  - claim-lock-proxy-<%= env %>
  - install-bosh-proxy-<%= env %>
  - deploy-k8s-proxy-<%= env %>
  - run-k8s-integration-tests-proxy-<%= env %>
  - destroy-k8s-proxy-<%= env %>
  - destroy-bosh-proxy-<%= env %>
<% end %>
  - upload-kubo-deployment
  - upload-kubo-release
  - success-notification
  - release-version
  - upload-github-releases
  - bump-minor-version
- name: build
  jobs:
  - run-unit-tests
  - build-kubo-release
  - package-kubo-deployment-tarball
<% env_list.each do |env| %>
- name: <%= env %>
  jobs:
  - claim-lock-<%= env %>
  - install-bosh-<%= env %>
  - deploy-k8s-<%= env %>
  - run-k8s-integration-tests-<%= env %>
  <% if conformance_test_iaases.include? env %>
  - run-k8s-conformance-tests-<%= env %>
  <% end %>
  - run-k8s-turbulence-tests-<%= env %>
  - destroy-k8s-<%= env %>
  - destroy-bosh-<%= env %>
  <% if upgrade_test_iaases.include? env %>
  - claim-lock-upgrade-<%= env %>
  - install-old-bosh-<%= env %>
  - deploy-old-k8s-<%= env %>
  - upgrade-bosh-and-kubo-<%= env %>
  - destroy-k8s-upgrade-<%= env %>
  - destroy-bosh-upgrade-<%= env %>
  <% end %>
  <% if multi_master_upgrade_test_iaases.include? env %>
  - claim-lock-upgrade-multi-master-<%= env %>
  - install-old-bosh-multi-master-<%= env %>
  - deploy-old-k8s-multi-master-<%= env %>
  - upgrade-bosh-and-kubo-multi-master-<%= env %>
  - destroy-k8s-upgrade-multi-master-<%= env %>
  - destroy-bosh-upgrade-multi-master-<%= env %>
  <% end %>
<% end %>
- name: integration
  jobs:
  <% env_list.each do |env| %>
  - run-k8s-integration-tests-<%= env %>
  <% end %>
- name: conformance
  jobs:
  <% conformance_test_iaases.each do |env| %>
  - run-k8s-conformance-tests-<%= env %>
  <% end %>
- name: turbulence
  jobs:
  <% env_list.each do |env| %>
  - run-k8s-turbulence-tests-<%= env %>
  <% end %>
- name: upgrade
  jobs:
  <% upgrade_test_iaases.each do |env| %>
  - claim-lock-upgrade-<%= env %>
  - install-old-bosh-<%= env %>
  - deploy-old-k8s-<%= env %>
  - upgrade-bosh-and-kubo-<%= env %>
  - destroy-k8s-upgrade-<%= env %>
  - destroy-bosh-upgrade-<%= env %>
  <% end %>
  <% multi_master_upgrade_test_iaases.each do |iaas| %>
  - claim-lock-upgrade-multi-master-<%= iaas %>
  - install-old-bosh-multi-master-<%= iaas %>
  - deploy-old-k8s-multi-master-<%= iaas %>
  - upgrade-bosh-and-kubo-multi-master-<%= iaas %>
  - destroy-k8s-upgrade-multi-master-<%= iaas %>
  - destroy-bosh-upgrade-multi-master-<%= iaas %>
  <% end %>
- name: proxy
  jobs:
  <% proxy_iaases.each do |env| %>
    - claim-lock-proxy-<%= env %>
    - install-bosh-proxy-<%= env %>
    - deploy-k8s-proxy-<%= env %>
    - run-k8s-integration-tests-proxy-<%= env %>
    - destroy-k8s-proxy-<%= env %>
    - destroy-bosh-proxy-<%= env %>
  <% end %>

resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-ci.git
    branch: master
    private_key: ((git-ssh-key.private_key))

- name: git-kubo-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-deployment.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - 'LICENSE'
    - 'NOTICE'

- name: git-kubo-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-release.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - '*.md'
    - 'LICENSE'
    - 'NOTICE'

- name: slackers
  type: git
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-home.git
    private_key: ((git-ssh-key.private_key))
    paths:
    - 'slackers'

- name: slack-alert
  type: slack-notification
  source:
    url: ((build-alert-slack-url))

<% env_list.each do |env| %>
- name: kubo-lock-<%= env %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: kubo-<%= env %>
<% end %>

- name: kubo-lock-proxy-vsphere
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: kubo-vsphere-proxy

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: gcs-kubeconfig
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: k8s/config

- name: gcs-kubo-release-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    regexp: dev-builds/kubo-release-(.*).tgz

- name: gcs-kubo-deployment-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    regexp: dev-builds/kubo-deployment-(.*).tgz

- name: gcs-kubo-releases
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-releases
    regexp: kubo-release-(.*).tgz

- name: gcs-kubo-deployments
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-releases
    regexp: kubo-deployment-(.*).tgz

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-deployment-latest.tgz

- name: old-kubo-release-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-release
    pre_release: true
    access_token: ((github-kubo-gitbot-access-token))

- name: old-kubo-deployment-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-deployment
    pre_release: true
    access_token: ((github-kubo-gitbot-access-token))

<% iaases_for_new_bosh_stemcell.each do |env| %>
- name: new-bosh-stemcell-<%= env %>
  type: bosh-io-stemcell
  source:
    name: bosh-<%= stemcell_types[env] %>-ubuntu-trusty-go_agent
<% end %>

- name: conformance-results
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: conformance-results
    regexp: conformance-results-[a-z]+-(.*).tar.gz

- name: kubo-version
  type: semver
  source:
    driver: gcs
    key: versions/kubo-version
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store

- name: gh-release-kubo-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-release
    access_token: ((github-token-key))
    drafts: true
    pre_release: true

- name: gh-release-kubo-deployment
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-deployment
    access_token: ((github-token-key))
    drafts: true
    pre_release: true

- name: tracker-finisher
  type: tracker
  source:
    token: ((cfcr-tracker-token))
    project_id: "2093412"
    tracker_url: https://www.pivotaltracker.com

jobs:
- name: run-unit-tests
  plan:
  - get: slackers
  - get: git-kubo-ci
  - get: git-kubo-deployment
    trigger: true
  - get: git-kubo-release
    trigger: true
  - task: run-release-unit-tests
    file: git-kubo-ci/tasks/run-release-unit-tests.yml
    <% if enable_failure_alert %>
    on_failure: &on_failure_alert
      do:
      - task: configure-slack-notification
        file: git-kubo-ci/tasks/configure-slack-notification.yml
      - put: slack-alert
        params:
          attachments_file: slack-notification/attachments
          text: |
            Build Failed. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    <% else %>
    on_failure: &on_failure_alert
    <% end %>
  - task: run-deployment-unit-tests
    file: git-kubo-ci/tasks/run-deployment-unit-tests.yml
    on_failure: *on_failure_alert

- name: build-kubo-release
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'run-unit-tests' ]
      trigger: true
    - get: kubo-version
      params:
        pre: dev
    - get: git-kubo-release
      passed: [ 'run-unit-tests' ]
      trigger: true
  - task: build-kubo-release
    file: git-kubo-ci/tasks/build-kubo-release.yml
    on_failure: *on_failure_alert
  - task: export-release
    file: git-kubo-ci/tasks/export-release.yml
    privileged: true
    input_mapping:
      kubo-ci: git-kubo-ci
      release: kubo-release
  - put: gcs-kubo-release-tarball-untested
    params:
      file: compiled-release/kubo-*.tgz
  - put: kubo-version
    params:
      pre: dev

- name: package-kubo-deployment-tarball
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'build-kubo-release' ]
    - get: kubo-version
      passed: [ 'build-kubo-release' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'build-kubo-release' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'build-kubo-release' ]
  - task: build-kubo-deployment-tarball
    file: git-kubo-ci/tasks/build-kubo-deployment-tarball.yml
    on_failure: *on_failure_alert
  - put: gcs-kubo-deployment-tarball-untested
    params:
      file: kubo-deployment-tarball/kubo-deployment*.tgz

<% env_list.each do |env| %>
- name: claim-lock-<%= env %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ 'package-kubo-deployment-tarball' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: git-kubo-deployment
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
  - put: kubo-lock-<%= env %>
    params: { acquire: true }

- name: install-bosh-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'claim-lock-<%= env %>' ]
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-<%= env %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-<%= env %>' ]
  - task: install
    attempts: 2
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    params:
      USE_TURBULENCE: 1
      <% if env.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif env =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= env %>-k8s-cloud-config-multiaz.yml
      <% elsif env.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
    on_failure: *on_failure_alert
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json
  - task: configure-bosh-for-turbulence
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/configure-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}

- name: deploy-k8s-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'install-bosh-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-<%= env %>' ]
    - get: kubo-version
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-bosh-<%= env %>' ]
  - task: deploy
    tags: [<%= env %>]
    input_mapping:
      gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested
      kubo-lock: kubo-lock-<%= env %>
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    params:
      DISABLE_DENY_ESCALATING_EXEC: 1
      WITH_PRIVILEGED_CONTAINERS: 1
    <% if env =~ /^(gcp|vsphere-lb|aws-lb)/ %>
      DEPLOYMENT_OPS_FILE: enable-multiaz-workers-and-masters.yml
    <% end %>
    on_failure: *on_failure_alert
  - task: smoke-test
    tags: [<%= env %>]
    input_mapping:
      kubo-lock: kubo-lock-<%= env %>
    params:
      ERRAND_NAME: smoke-tests
      INSTANCE: "master/0"
    file: git-kubo-ci/tasks/run-errand.yml
    on_failure: *on_failure_alert

- name: run-k8s-integration-tests-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: kubo-version
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
  - task: integration-tests
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/run-k8s-integration-tests.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
    params:
      DEPLOYMENT_NAME: ci-service
      ENABLE_ADDONS_TESTS: true
      ENABLE_API_EXTENSIONS_TESTS: true
      ENABLE_CERTIFICATE_TESTS: true
      ENABLE_GENERIC_TESTS: true
      ENABLE_OSS_ONLY_TESTS: true
      ENABLE_PERSISTENT_VOLUME_TESTS: true
      <% if env =~ /^(gcp|vsphere-lb|aws-lb)/ %>
      ENABLE_MULTI_AZ_TESTS: true
      <% end %>
  - task: pod-to-pod
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/pod-to-pod.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert

<% if iaases.include?(env) %>
- name: run-k8s-conformance-tests-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: kubo-version
      passed: [ 'deploy-k8s-<%= env %>' ]
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
  - task: conformance-tests
    file: git-kubo-ci/tasks/run-k8s-conformance-tests.yml
    tags: ['<%= env %>']
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    params:
      CONFORMANCE_RESULTS_DIR: conformance-results
    ensure:
      put: conformance-results
      params:
        file: conformance-results/conformance-results-*.tar.gz
    on_failure: *on_failure_alert
<% end %>

<%
  turbulence_passed_reqs = ["run-k8s-integration-tests-#{env}"]
  if iaases.include? env
    turbulence_passed_reqs << "run-k8s-conformance-tests-#{env}"
  end
%>

- name: run-k8s-turbulence-tests-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= turbulence_passed_reqs %>
    - get: git-kubo-deployment
      passed: <%= turbulence_passed_reqs %>
    - get: git-kubo-release
      passed: <%= turbulence_passed_reqs %>
    - get: kubo-version
      passed: <%= turbulence_passed_reqs %>
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: ['<%= env %>']

  - task: turbulence-tests
    file: git-kubo-ci/tasks/run-k8s-turbulence-tests.yml
    tags: ['<%= env %>']
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
    params:
      ENABLE_TURBULENCE_WORKER_DRAIN_TESTS: true
      ENABLE_TURBULENCE_WORKER_FAILURE_TESTS: true
      ENABLE_TURBULENCE_MASTER_FAILURE_TESTS: true
      <% if env =~ /^(gcp|vsphere-lb|aws-lb)/ %>
      ENABLE_MULTI_AZ_TESTS: true
      <% end %>
      <% if env != "openstack" %>
      ENABLE_TURBULENCE_PERSISTENCE_FAILURE_TESTS: true
      <% end %>

<%
  destroy_k8s_passed_reqs = ["run-k8s-turbulence-tests-#{env}"]
%>

- name: destroy-k8s-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= destroy_k8s_passed_reqs %>
    - get: kubo-version
      passed: <%= destroy_k8s_passed_reqs %>
    - get: git-kubo-deployment
      passed: <%= destroy_k8s_passed_reqs %>
    - get: git-kubo-release
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= destroy_k8s_passed_reqs %>
  - task: destroy-k8s
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert

<%
destroy_bosh_passed_reqs = [ "destroy-k8s-#{env}" ]
%>

- name: destroy-bosh-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: <%= destroy_bosh_passed_reqs %>
    - get: git-kubo-release
      passed: <%= destroy_bosh_passed_reqs %>
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= destroy_bosh_passed_reqs %>
    - get: kubo-version
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= destroy_bosh_passed_reqs %>
  - task: destroy
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
  - put: kubo-lock-<%= env %>
    params: { release: kubo-lock-<%= env %> }
<% end %>

<% upgrade_test_iaases.each do |iaas| %>
- name: claim-lock-upgrade-<%= iaas %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ 'package-kubo-deployment-tarball' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: git-kubo-deployment
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
  - put: kubo-lock-<%= iaas %>
    params: { acquire: true }

- name: install-old-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: old-kubo-deployment-tarball
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'claim-lock-upgrade-<%= iaas %>' ]

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*/kubo-deployment

  - task: install
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
    params:
      <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif iaas =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= iaas %>-k8s-cloud-config-multiaz.yml
      <% elsif iaas.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>

  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-old-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: old-kubo-deployment-tarball
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: old-kubo-release-tarball
      params:
        globs:
        - "kubo-release*"
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'install-old-bosh-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-old-bosh-<%= iaas %>' ]

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*/kubo-deployment

  - task: deploy
    tags: [<%= iaas %>]
    input_mapping:
      gcs-kubo-release-tarball: old-kubo-release-tarball
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    params:
    <% if iaas == 'vsphere-lb' %>
      DEPLOYMENT_OPS_FILE: add-haproxy-and-multiaz-workers.yml
    <% else %>
      DEPLOYMENT_OPS_FILE: enable-multiaz-workers.yml
    <% end %>
  - put: gcs-kubeconfig
    params:
      file: gcs-kubeconfig/config

- name: upgrade-bosh-and-kubo-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-old-k8s-<%= iaas %>' ]
    - get: new-bosh-stemcell
      resource: new-bosh-stemcell-<%= iaas %>

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: ['<%= iaas %>']

  - task: upgrade
    tags: ['<%= iaas %>']
    file: git-kubo-ci/tasks/run-k8s-upgrade-tests.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested
    params:
      <% if iaas =~ /^(gcp|vsphere-lb|aws-lb)/ %>
      DEPLOYMENT_OPS_FILE: enable-multiaz-workers-and-masters.yml
      <% end %>
      <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif iaas =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= iaas %>-k8s-cloud-config-multiaz.yml
      <% elsif iaas.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>

  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: destroy-k8s-upgrade-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'upgrade-bosh-and-kubo-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: ['<%= iaas %>']

  - task: destroy-k8s
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>

- name: destroy-bosh-upgrade-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-upgrade-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: ['<%= iaas %>']

  - task: destroy
    tags: [ '<%= iaas %>' ]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>

  - put: kubo-lock-<%= iaas %>
    params:
      release: kubo-lock-<%= iaas %>
<% end %>

<% multi_master_upgrade_test_iaases.each do |iaas| %>
- name: claim-lock-upgrade-multi-master-<%= iaas %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ 'package-kubo-deployment-tarball' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: git-kubo-deployment
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
  - put: kubo-lock-<%= iaas %>
    params: { acquire: true }

- name: install-old-bosh-multi-master-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: old-kubo-deployment-tarball
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-upgrade-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-upgrade-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-upgrade-multi-master-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-upgrade-multi-master-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-upgrade-multi-master-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'claim-lock-upgrade-multi-master-<%= iaas %>' ]

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*/kubo-deployment

  - task: install
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
    params:
      <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif iaas =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= iaas %>-k8s-cloud-config-multiaz.yml
      <% elsif iaas.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>

  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-old-k8s-multi-master-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: old-kubo-deployment-tarball
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: old-kubo-release-tarball
      params:
        globs:
        - "kubo-release*"
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-old-bosh-multi-master-<%= iaas %>' ]

  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= iaas %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*/kubo-deployment

  - task: deploy
    tags: [<%= iaas %>]
    input_mapping:
      gcs-kubo-release-tarball: old-kubo-release-tarball
      kubo-lock: kubo-lock-<%= iaas %>
      git-kubo-deployment: unpacked_dir
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    params:
      DEPLOYMENT_OPS_FILE: enable-multiaz-workers-and-masters.yml
      <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif iaas =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= iaas %>-k8s-cloud-config-multiaz.yml
      <% elsif iaas.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
  - put: gcs-kubeconfig
    params:
      file: gcs-kubeconfig/config

- name: upgrade-bosh-and-kubo-multi-master-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-old-k8s-multi-master-<%= iaas %>' ]
    - get: new-bosh-stemcell
      resource: new-bosh-stemcell-<%= iaas %>

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: ['<%= iaas %>']

  - task: upgrade
    tags: ['<%= iaas %>']
    file: git-kubo-ci/tasks/run-k8s-upgrade-tests.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>
      gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested
    params:
      <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif iaas =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= iaas %>-k8s-cloud-config-multiaz.yml
      <% elsif iaas.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
      ENABLE_MULTI_AZ_TESTS: true

  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: destroy-k8s-upgrade-multi-master-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'upgrade-bosh-and-kubo-multi-master-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: ['<%= iaas %>']

  - task: destroy-k8s
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>

- name: destroy-bosh-upgrade-multi-master-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= iaas %>' ]

  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: ['<%= iaas %>']

  - task: destroy
    tags: [ '<%= iaas %>' ]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping:
      kubo-lock: kubo-lock-<%= iaas %>

  - put: kubo-lock-<%= iaas %>
    params:
      release: kubo-lock-<%= iaas %>
<% end %>

- name: claim-lock-proxy-vsphere
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ 'package-kubo-deployment-tarball' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: git-kubo-deployment
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
  - put: kubo-lock-proxy-vsphere
    params: { acquire: true }

- name: install-bosh-proxy-vsphere
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'claim-lock-proxy-vsphere' ]
    - get: kubo-lock-proxy-vsphere
      version: every
      trigger: true
      passed: [ 'claim-lock-proxy-vsphere' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-proxy-vsphere' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-proxy-vsphere' ]
    - get: kubo-version
      passed: [ 'claim-lock-proxy-vsphere' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-proxy-vsphere' ]
  - task: install
    attempts: 2
    tags: [vsphere]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-proxy-vsphere}
    params:
      USE_TURBULENCE: 1
    on_failure: *on_failure_alert
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-k8s-proxy-vsphere
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-proxy-vsphere
      version: every
      trigger: true
      passed: [ 'install-bosh-proxy-vsphere' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-proxy-vsphere' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-proxy-vsphere' ]
    - get: kubo-version
      passed: [ 'install-bosh-proxy-vsphere' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-proxy-vsphere' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-proxy-vsphere' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-bosh-proxy-vsphere' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-bosh-proxy-vsphere' ]
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball-untested
    tags: [vsphere]
  - task: deploy-tinyproxy
    file: git-kubo-ci/tasks/deploy-tinyproxy.yml
    tags: [vsphere]
    input_mapping: {kubo-lock: kubo-lock-proxy-vsphere}
    params:
      IAAS: "vsphere"
      PROXY_STATIC_IP: 10.74.42.132
  - task: apply-runtime-config
    file: git-kubo-ci/tasks/apply-runtime-config.yml
    tags: [vsphere]
    input_mapping: {kubo-lock: kubo-lock-proxy-vsphere}
  - task: deploy
    tags: [vsphere]
    params:
      DEPLOYMENT_NAME: ci-service-k8s-with-proxy
    input_mapping:
      gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested
      kubo-lock: kubo-lock-proxy-vsphere
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    on_failure: *on_failure_alert
  - task: smoke-test
    tags: [vsphere]
    input_mapping:
      kubo-lock: kubo-lock-proxy-vsphere
    params:
      DEPLOYMENT_NAME: ci-service-k8s-with-proxy
      ERRAND_NAME: smoke-tests
      INSTANCE: "master/0"
    file: git-kubo-ci/tasks/run-errand.yml
    on_failure: *on_failure_alert

- name: run-k8s-integration-tests-proxy-vsphere
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-proxy-vsphere
      version: every
      trigger: true
      passed: [ 'deploy-k8s-proxy-vsphere' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-proxy-vsphere' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-proxy-vsphere' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-proxy-vsphere' ]
    - get: kubo-version
      passed: [ 'deploy-k8s-proxy-vsphere' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-proxy-vsphere' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s-proxy-vsphere' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-k8s-proxy-vsphere' ]
  - task: integration-tests
    tags: [vsphere]
    file: git-kubo-ci/tasks/run-k8s-integration-tests.yml
    input_mapping:
      kubo-lock: kubo-lock-proxy-vsphere
    params:
      DEPLOYMENT_NAME: ci-service-k8s-with-proxy
      ENABLE_ADDONS_TESTS: true
      ENABLE_API_EXTENSIONS_TESTS: true
      ENABLE_CERTIFICATE_TESTS: true
      ENABLE_GENERIC_TESTS: true
      ENABLE_OSS_ONLY_TESTS: true
      ENABLE_PERSISTENT_VOLUME_TESTS: true
    on_failure: *on_failure_alert
  - task: pod-to-pod
    tags: [vsphere]
    file: git-kubo-ci/tasks/pod-to-pod.yml
    input_mapping:
      kubo-lock: kubo-lock-proxy-vsphere
    params:
      DEPLOYMENT_NAME: ci-service-k8s-with-proxy
    on_failure: *on_failure_alert

- name: destroy-k8s-proxy-vsphere
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-proxy-vsphere
      version: every
      trigger: true
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
    - get: kubo-version
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
    - get: git-kubo-deployment
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
    - get: git-kubo-release
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
    - get: gcs-bosh-state
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
    - get: gcs-bosh-creds
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'run-k8s-integration-tests-proxy-vsphere' ]
  - task: destroy-k8s
    tags: [vsphere]
    params:
      DEPLOYMENT_NAME: ci-service-k8s-with-proxy
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-proxy-vsphere}
    on_failure: *on_failure_alert
  - task: destroy-tinyproxy
    tags: [vsphere]
    file: git-kubo-ci/tasks/destroy-tinyproxy.yml
    input_mapping: {kubo-lock: kubo-lock-proxy-vsphere}
    on_failure: *on_failure_alert

- name: destroy-bosh-proxy-vsphere
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-proxy-vsphere' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s-proxy-vsphere' ]
    - get: kubo-lock-proxy-vsphere
      version: every
      trigger: true
      passed: [ 'destroy-k8s-proxy-vsphere' ]
    - get: kubo-version
      passed: [ 'destroy-k8s-proxy-vsphere' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-proxy-vsphere' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-proxy-vsphere' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'destroy-k8s-proxy-vsphere' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'destroy-k8s-proxy-vsphere' ]
  - task: destroy
    tags: [vsphere]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-proxy-vsphere}
    on_failure: *on_failure_alert
  - put: kubo-lock-proxy-vsphere
    params: { release: kubo-lock-proxy-vsphere }

<%
  passed_requirements = env_list.map {|env| "destroy-bosh-#{env}" unless env == 'openstack'}.compact
  passed_requirements += upgrade_test_iaases.map {|iaas| "destroy-bosh-upgrade-#{iaas}" unless iaas == 'openstack'}.compact
  passed_requirements += proxy_iaases.map {|iaas| "destroy-bosh-proxy-#{iaas}"}.compact
%>

- name: upload-kubo-deployment
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: <%= passed_requirements %>
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= passed_requirements %>
  - aggregate:
    - put: gcs-kubo-deployment-tarball
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz
    - put: gcs-kubo-deployments
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz

- name: upload-kubo-release
  plan:
  - aggregate:
    - get: gcs-kubo-release-tarball-untested
      passed: <%= passed_requirements %>
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
  - aggregate:
    - put: gcs-kubo-release-tarball
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz
    - put: gcs-kubo-releases
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz

- name: success-notification
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ upload-kubo-release, upload-kubo-deployment ]
      trigger: true
    - get: git-kubo-release
      passed: <%= passed_requirements %>
    - get: git-kubo-deployment
      passed: [ upload-kubo-deployment ]
      trigger: true
  - put: tracker-finisher
    params:
      repos:
        - git-kubo-release
        - git-kubo-deployment
  - put: slack-alert
    params:
      text: |
        Published new artifacts for kubo-release and kubo-deployment. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: release-version
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
    - get: git-kubo-release
      passed: <%= passed_requirements %>
    - get: git-kubo-deployment
      passed: <%= passed_requirements %>

- name: upload-github-releases
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-version
      params:
        bump: final
    - get: git-kubo-release
      passed: [ 'release-version' ]
    - get: git-kubo-deployment
      passed: [ 'release-version' ]
  - task: upload-releases
    file: git-kubo-ci/tasks/upload-github-releases.yml
    params:
      ACCESS_KEY_ID: ((gcs-access-key-id))
      SECRET_ACCESS_KEY: ((gcs-secret-access-key))
  - aggregate:
    - do:
      - put: git-kubo-release
        params:
          repository: git-kubo-release-output
      # We need to push the tags separately due to
      # https://github.com/concourse/git-resource/issues/110
      - put: git-kubo-release
        params:
          repository: git-kubo-release-output
          only_tag: true
      - put: gh-release-kubo-release
        params:
          name: kubo-release/name
          tag: kubo-version/version
          tag_prefix: v
          body: kubo-release/body
          globs: ["kubo-release/*.tgz"]
    - do:
      - put: git-kubo-deployment
        params:
          repository: git-kubo-deployment
          tag: kubo-version/version
          tag_prefix: v
          only_tag: true
      - put: gh-release-kubo-deployment
        params:
          name: kubo-deployment/name
          tag: kubo-version/version
          tag_prefix: v
          body: kubo-deployment/body
          globs: ["kubo-deployment/kubo-deployment-*.tgz"]
    - put: git-kubo-ci
      params:
        repository: git-kubo-ci
        only_tag: true
        tag: kubo-version/version
        tag_prefix: v
  - put: kubo-version
    params:
      bump: patch

- name: bump-minor-version
  plan:
  - get: kubo-version
  - put: kubo-version
    params:
      bump: minor
